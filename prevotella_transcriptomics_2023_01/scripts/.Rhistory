knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(hrbrthemes)
library(ggrepel)
library(tidyr)
library(edgeR)
library(ggpubr)
library(readr)
library(viridis)
library(RColorBrewer)
library(BiocGenerics)
library('RUVSeq')
library(ComplexHeatmap)
cds_counts <- unlist(read.delim("../data/rna_align/counttable.txt.summary",
row.names = 1)[1,])
rrna_counts <- unlist(read.delim("../data/rna_align/rRNA_counttable.txt.summary",
row.names = 1)[1,])
trna_counts <- unlist(read.delim("../data/rna_align/tRNA_counttable.txt.summary",
row.names = 1)[1,])
library(ggplot2)
library(dplyr)
library(hrbrthemes)
library(ggrepel)
library(tidyr)
library(edgeR)
library(ggpubr)
library(readr)
library(viridis)
library(RColorBrewer)
library(BiocGenerics)
library('RUVSeq')
library(ComplexHeatmap)
cds_counts <- unlist(read.delim("../data/rna_align/counttable.txt.summary",
row.names = 1)[1,])
rrna_counts <- unlist(read.delim("../data/rna_align/rRNA_counttable.txt.summary",
row.names = 1)[1,])
trna_counts <- unlist(read.delim("../data/rna_align/tRNA_counttable.txt.summary",
row.names = 1)[1,])
df_rnatypes <- data.frame(rna_type = c(rep("rRNA", length(rrna_counts)), rep("tRNA", length(trna_counts)),
rep("mRNA", length(cds_counts))),
counts = c(rrna_counts,  trna_counts, cds_counts), sample = rep(names(rrna_counts), 3))
df_rnatypes
df_rnatypes$sample <- gsub(".*.rna_align\\.(.+)\\.fq\\.gz\\.bam", "\\1" , df_rnatypes$sample)
df_rnatypes$sample
df_rnatypes$condition <- gsub("(.+_\\d+)_\\d", "\\1" , df_rnatypes$sample)
df_rnatypes$condition
df_rnatypes <- df_rnatypes[order(df_rnatypes$sample),]
rownames(df_rnatypes) <- c()
df_rnatypes <- df_rnatypes %>%
group_by(sample) %>%  mutate(norm_fac = sum(counts)/10000000) %>% mutate(cpm_counts=counts/norm_fac)
df_rnatypes
write.csv(df_rnatypes, "../analysis/rna_types/rna_types.csv")
write.csv(df_rnatypes, "../analysis/rna_types/rna_types.csv")
# change level of rnatypes
df_rnatypes$rna_type <- factor(df_rnatypes$rna_type, levels = c("tRNA", "rRNA", "mRNA"))
# make the plot:
g <- ggplot(df_rnatypes) + aes(x=sample, y=counts, fill = rna_type) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_brewer(palette="Paired") + theme_pubr() +
scale_y_continuous(labels = scales::unit_format(unit = "", scale = 1e-6), name = "reads (in million)",
breaks = seq(0,10000000, by = 2000000)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9))
g
g
# make the plot:
g <- ggplot(df_rnatypes) + aes(x=sample, y=counts, fill = rna_type) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_viridis(discrete = T) + theme_pubr() +
scale_y_continuous(labels = scales::unit_format(unit = "", scale = 1e-6), name = "reads (in million)",
breaks = seq(0,10000000, by = 2000000)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9))
g
library(MetBrewer)
# make the plot:
g <- ggplot(df_rnatypes) + aes(x=sample, y=counts, fill = rna_type) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values=met.brewer("Greek", 3)) + theme_pubr() +
scale_y_continuous(labels = scales::unit_format(unit = "", scale = 1e-6), name = "reads (in million)",
breaks = seq(0,10000000, by = 2000000)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9))
g
# make the plot:
g <- ggplot(df_rnatypes) + aes(x=sample, y=counts, fill = rna_type) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values=met.brewer("Greek", 3, direction = -1)) + theme_pubr() +
scale_y_continuous(labels = scales::unit_format(unit = "", scale = 1e-6), name = "reads (in million)",
breaks = seq(0,10000000, by = 2000000)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9))
g
g
g <- ggplot(df_rnatypes) + aes(x=sample, y=counts, fill = rna_type) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values=met.brewer("Renoir", 3, direction = -1)) + theme_pubr() +
scale_y_continuous(labels = scales::unit_format(unit = "", scale = 1e-6), name = "reads (in million)",
breaks = seq(0,10000000, by = 2000000)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9))
g
g <- ggplot(df_rnatypes) + aes(x=sample, y=counts, fill = rna_type) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values=met.brewer("Manet", 3, direction = -1)) + theme_pubr() +
scale_y_continuous(labels = scales::unit_format(unit = "", scale = 1e-6), name = "reads (in million)",
breaks = seq(0,10000000, by = 2000000)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9))
g
g <- ggplot(df_rnatypes) + aes(x=sample, y=counts, fill = rna_type) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values=met.brewer("VanGogh1", 3, direction = -1)) + theme_pubr() +
scale_y_continuous(labels = scales::unit_format(unit = "", scale = 1e-6), name = "reads (in million)",
breaks = seq(0,10000000, by = 2000000)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9))
g
g <- ggplot(df_rnatypes) + aes(x=sample, y=counts, fill = rna_type) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values=met.brewer("Wissing", 3, direction = -1)) + theme_pubr() +
scale_y_continuous(labels = scales::unit_format(unit = "", scale = 1e-6), name = "reads (in million)",
breaks = seq(0,10000000, by = 2000000)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9))
g
g <- ggplot(df_rnatypes) + aes(x=sample, y=counts, fill = rna_type) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values=met.brewer("VanGogh3", 3, direction = -1)) + theme_pubr() +
scale_y_continuous(labels = scales::unit_format(unit = "", scale = 1e-6), name = "reads (in million)",
breaks = seq(0,10000000, by = 2000000)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9))
g
g <- ggplot(df_rnatypes) + aes(x=sample, y=counts, fill = rna_type) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values=met.brewer("VanGogh2", 3, direction = -1)) + theme_pubr() +
scale_y_continuous(labels = scales::unit_format(unit = "", scale = 1e-6), name = "reads (in million)",
breaks = seq(0,10000000, by = 2000000)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9))
g
g <- ggplot(df_rnatypes) + aes(x=sample, y=counts, fill = rna_type) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values=met.brewer("VanGogh2", 3, direction = 1)) + theme_pubr() +
scale_y_continuous(labels = scales::unit_format(unit = "", scale = 1e-6), name = "reads (in million)",
breaks = seq(0,10000000, by = 2000000)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9))
g
g <- ggplot(df_rnatypes) + aes(x=sample, y=counts, fill = rna_type) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values=met.brewer("VanGogh1", 3, direction = 1)) + theme_pubr() +
scale_y_continuous(labels = scales::unit_format(unit = "", scale = 1e-6), name = "reads (in million)",
breaks = seq(0,10000000, by = 2000000)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9))
g
g <- ggplot(df_rnatypes) + aes(x=sample, y=counts, fill = rna_type) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values=met.brewer("VanGogh2", 3, direction = 1)) + theme_pubr() +
scale_y_continuous(labels = scales::unit_format(unit = "", scale = 1e-6), name = "reads (in million)",
breaks = seq(0,10000000, by = 2000000)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 9))
g
svg("../analysis/rna_types/rnatypes.svg")
print(g)
dev.off()
svg("../analysis/rna_types/rnatypes.svg", width = 10)
print(g)
dev.off()
svg("../analysis/rna_types/rnatypes.svg", width = 15)
print(g)
dev.off()
png("../analysis/rna_types/rnatypes.png", width = 700, height = 700)
print(g)
dev.off()
png("../analysis/rna_types/rnatypes.png", width = 1000, height = 700)
print(g)
dev.off()
png("../analysis/rna_types/rnatypes.png", width = 1000, height = 600)
print(g)
dev.off()
# import:
GenewiseCounts <- read.delim(
"../data/rna_align/counttable.txt",
sep = "\t", row.names = 1, header = T, comment.char = "#")
dim(GenewiseCounts)
head(GenewiseCounts[,1:6])
gwc <- GenewiseCounts[,5:length(GenewiseCounts[1,])]
pnapat <- ".*.rna_align\\.(.+)\\.fq\\.gz\\.bam"
pnapat
colnames (gwc) <- gsub(pnapat,"\\1", colnames(gwc))
colnames (gwc)
# select controls:
gene_lengths <- gwc$Length
raw_counts <- gwc[,-1]
norm_length <- data.frame(sapply(raw_counts, function(x) x / gene_lengths))
tpm_matrix <- data.frame(sapply(norm_length, function(x) x * 1e6 / sum(x)), row.names = rownames(raw_counts))
pairs(log(tpm_matrix))
pairs(log(tpm_matrix))
pairs(log(tpm_matrix[,1:5]))
pairs(log(tpm_matrix[,1:5]))
pairs(log(tpm_matrix[,1:10]))
head(gwc)
gwc_n <- gwc[, grepl("CON_0|Lengt", colnames(gwc))]
raw_gwc <- data.frame(length=gwc_n$Length, counts=rowMeans(gwc_n[,-1]))
gwcnorm_length <- data.frame(sapply(gwc_n[,-1], function(x) x / (gwc[,1]/1000)))
gwc_tpm <- data.frame(Length = gwc_n$Length,
sapply(gwcnorm_length, function(x) x * 1e6 / sum(x)), row.names = rownames(gwc_n))
gwc_tpm[, grepl("(control)|(Length)", colnames(gwc_tpm))]
tpm <- data.frame(length=gwc_tpm$Length, counts=rowMeans(gwc_tpm[,-1]))
lpt <- tpm %>% ggplot(aes(x=length, y=log10(counts+1))) + geom_point() +
scale_x_continuous(limits = c(0,1000)) + scale_y_continuous(limits = c(0,5)) + theme_minimal()
lpr <- raw_gwc %>% ggplot(aes(x=length, y=log10(counts+1))) + geom_point() +
scale_x_continuous(limits = c(0,1000)) + scale_y_continuous(limits = c(-0.5,5)) + theme_minimal() +
geom_text_repel(aes( label=ifelse(length<80, rownames(raw_gwc), "")), size=2.5, max.overlaps = 15)
lpr
lpt
svg("../data/coverage_etc/length_plot_raw.svg")
svg("../analysis/coverage_etc/length_plot_raw.svg")
print(lpr)
dev.off()
svg("../analysis/coverage_etc/length_plot_tpm_norm.svg")
print(lpt)
dev.off()
test <- as.factor(gsub("_\\d$", "",colnames(gwc)[-1]))
test
y <- DGEList(gwc[,-1], group = test, genes = gwc[,1,drop=FALSE])
options(digits = 3)
head(y$samples)
L <- min(y$samples$lib.size) / 1000000
cutoff <- 10
keep <- rowSums(cpm(y) > cutoff) >= 3
table(keep)
y <- y[keep, , keep.lib.sizes=FALSE]
batches = as.factor(gsub(".*_(\\d)$", "\\1", colnames(y)))
batches
design <- model.matrix(~0+test)
colnames(design) <- c(levels(test))
rownames(design) <- colnames(y$counts)
design
y <- calcNormFactors(y)
y <- estimateDisp(y, design, robust = T)
mycolors <- brewer.pal(2, "Paired")
plotPCA(cpm(y), col=mycolors[test])
plotRLE(cpm(y), outline=FALSE, ylim=c(-1, 1), col=mycolors[test],
main="RLE", las=2)
